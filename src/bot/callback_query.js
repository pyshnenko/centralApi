const { Markup } = require('telegraf');
const {session} = require('telegraf');
const okLbl='‚úÖ ';
const nokLbl='‚ùå ';
const prize='üçî';
const compare = require("./../../compare");
const sendPost = require('./api');
const {startKeyboard, isEmpty, accUsList, okText, nokText, YorNkeyboard, progressBar} = require("./other");
const {parse, parseT, original, originalT} = require("./listsReorginizer")
const formUrl = 'https://spamigor.ru/list';
let jwt = require('jsonwebtoken');

async function callback_query(ctx, logger, process) {
    let trig = true;
    let del = true;
    let session = {...ctx.session};
    if ((!session.start)&&(isEmpty(session))) ctx.replyWithHTML('–°–∏—Ç—É–∞—Ü–∏—è –º–Ω–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è. –Ω–∞–∂–º–∏—Ç–µ <b>"–°—Ç–∞—Ä—Ç"</b> (/start)');
    else {
        switch (ctx.callbackQuery.data.slice(0,8)) {

            //–ß–ê–¢

            case 'PMessage' : {
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                session.status='chatOpen';
                break;
            }

            case 'replyTo:' : {
                let name = ctx.callbackQuery.data.slice(8);
                ctx.replyWithHTML('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–∫—Ä–æ–π —á–∞—Ç', Markup.keyboard([
                    ['- –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç -']
                ]));
                session.status='chatWork';
                session.chatUser = name;
                del = false;
                break;
            }

            case 'closeCht' : {
                session.status='work';
                delete(session.chatUser);
                startKeyboard(ctx, '–ó–∞–∫—Ä—ã—Ç–æ', )
                break;
            }

            // –¢–†–ï–ù–ò–†–û–í–ö–ò  

            case 'editWebT' : {
                let item = Number(ctx.callbackQuery.data.slice(8));
                const uriDat = jwt.sign({ 
                    iss: 'bot', 
                    sub: 'auth', 
                    iat: Number(Date.now()), 
                    login: session.user.login, 
                    token: `Bearer ${session.token}`,
                    make: 'trening', 
                    categ: session.trening.list[item].name 
                }, process.env.SKEY, { expiresIn: '1h' });
                session.status = 'editWebT';
                let sendUri = new URL(formUrl);
                sendUri.searchParams.append('trening', true);
                sendUri.searchParams.append('auth', uriDat);
                console.log(sendUri.href)
                await ctx.replyWithHTML(
                    '–ü–µ—Ä–µ–π–¥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    Markup.keyboard([
                    Markup.button.webApp(
                        "Open",
                        sendUri.href
                    ),
                ]))
                break;
            }
            
            case 'tgTrnRep' : {
                if (trig) {
                    session.status='tgTrnRep';
                    session.trening.onTarget=0;
                    let res = await sendPost(originalT(session.trening), 'updateTreningList', `Bearer ${session.token}`);
                    trig = false;
                }
            }
            
            case 'tgTrn++' : {
                if (trig) {
                    session.status='tgTrn++';
                    session.trening.onTarget++;
                    let res = await sendPost(originalT(session.trening), 'updateTreningList', `Bearer ${session.token}`);
                }
            }

            case 'trening' : {
                session.status='trening';
                let res = await sendPost({login: session.user.login}, 'findTreningList', `Bearer ${session.token}`);
                if (res.status===402) {
                    logger.trace(`id: ${ctx.from.id}: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é`)
                    let result = await sendPost({}, 'createTreningList', `Bearer ${session.token}`);
                    if (result.status ===200) {
                        let data = parseT(res.data); 
                        session.trening = data;
                        let jDate = (new Date()).setMonth((new Date()).getMonth()+1);
                        if (!session.trening.hasOwnProperty('date')) session.trening.date = Number(jDate);
                        const rDate = new Date();
                        const sDate = new Date(session.trening.date);
                        if (rDate>sDate) session.trening.onTarget = 0;
                        let arr = [];
                        if ((session.trening.target)&&(session.trening.target>0)) {arr.push(Markup.button.callback(`‚ûï –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É`, `tgTrn++`));
                        arr.push(Markup.button.callback(`üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å`, `tgTrnRep`))}
                        arr.push(Markup.button.callback(`–∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü`, `tgTrnNew`));
                        arr.push(Markup.button.callback(`–∑–∞–¥–∞—Ç—å –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`, `tgTrnNDt`));
                        data.list.map((item, index)=>{if ((item!=='target')&&(item!=='onTarget')&&(item!=='date')) arr.push(Markup.button.callback(`${item.name}`, `trnList:${index}`))});
                        arr.push(Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, `crTrnCat`));
                        arr.push(Markup.button.callback(`–ù–∞–∑–∞–¥`, `StartP`));
                        ctx.replyWithHTML(
                            (session.trening.target&&session.trening.target>0) ? 
                                `–ü—Ä–æ–≥—Ä–µ—Å—Å:\n${progressBar((100*(session.trening.onTarget)||0)/(session.trening.target||1))}\n${session.trening.onTarget||'0'} –∏–∑ ${session.trening.target}\n${session.trening.onTarget>=session.trening.target?'‚ôø'+prize+prize+prize+'‚ôø':''}\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞:\n${sDate.toLocaleDateString('ru-RU')}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é` : 
                                '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
                            Markup.inlineKeyboard(arr, {columns: 1} ))
                        break;
                    }
                    else {
                        logger.warn(`–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è ${ctx.from.username||ctx.from.id} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞`);
                        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                        break;
                    }
                }
                else if (res.status===200) {
                    let data = parseT(res.data); 
                    session.trening = data;
                    let jDate = (new Date()).setMonth((new Date()).getMonth()+1);
                    if (!session.trening.hasOwnProperty('date')) session.trening.date = Number(jDate);
                    const rDate = new Date();
                    const sDate = new Date(session.trening.date);
                    if (rDate>sDate) session.trening.onTarget = 0;
                    let arr = [];
                    if ((session.trening.target)&&(session.trening.target>0)) {arr.push(Markup.button.callback(`‚ûï –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É`, `tgTrn++`));
                    arr.push(Markup.button.callback(`üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å`, `tgTrnRep`))}
                    arr.push(Markup.button.callback(`–∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü`, `tgTrnNew`));
                    arr.push(Markup.button.callback(`–∑–∞–¥–∞—Ç—å –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`, `tgTrnNDt`));
                    data.list.map((item, index)=>arr.push(Markup.button.callback(`${item.name}`, `trnList:${index}`)));
                    arr.push(Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, `crTrnCat`));
                    arr.push(Markup.button.callback(`–ù–∞–∑–∞–¥`, `StartP`));
                    ctx.replyWithHTML(
                        (session.trening.target&&session.trening.target>0) ? 
                            `–ü—Ä–æ–≥—Ä–µ—Å—Å:\n${progressBar((100*(session.trening.onTarget)||0)/(session.trening.target||1))}\n${session.trening.onTarget||'0'} –∏–∑ ${session.trening.target}\n${session.trening.onTarget>=session.trening.target?'‚ôø'+prize+prize+prize+'‚ôø':''}\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞:\n${sDate.toLocaleDateString('ru-RU')}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é` : 
                            '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
                        Markup.inlineKeyboard(arr, {columns: 1} ))
                    break;
                }

                else {
                    ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                    break;
                }
            }

            case 'trnTargP' : {
                let item = Number(ctx.callbackQuery.data.slice(8));
                session.trening.list[item].onTarget++;
                let res = await sendPost(originalT(session.trening), 'updateTreningList', `Bearer ${session.token}`);
                if (res.status===200) {
                    let data = parseT(res.data); 
                    session.trening = data;
                }
                else {
                    startKeyboard(ctx, '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ');
                    break;
                }
            }

            case 'trnList:' : {
                let item = Number(ctx.callbackQuery.data.slice(8));
                let arr = [];
                let jDate = (new Date()).setMonth((new Date()).getMonth()+1);
                if (!session.trening.list[item].hasOwnProperty('date')) session.trening.list[item].date = Number(jDate);
                const rDate = new Date();
                const sDate = new Date(session.trening.list[item].date);
                if (rDate>sDate) session.trening.list[item].onTarget = 0;
                if (session.trening.list[item].target) arr.push(Markup.button.callback(`‚ûï –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É`, `trnTargP${item}`))
                session.trening.list[item].array.map((items, index)=>arr.push(Markup.button.callback(`${items.name} - ${items.w}`, `trenTren${item}&&${index}`)));
                arr.push(Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ WEB`, `editWebT${item}`));
                arr.push(Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', `addTren:${item}`));
                arr.push(Markup.button.callback('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `reNmCatT${item}`));
                arr.push(Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `delCatT:${item}`));
                arr.push(Markup.button.callback('–ù–∞–∑–∞–¥', `trening`));
                ctx.replyWithHTML((session.trening.list[item].target&&session.trening.list[item].target>0) ? 
                `–ü—Ä–æ–≥—Ä–µ—Å—Å:\n${progressBar((100*(session.trening.list[item].onTarget)||0)/(session.trening.list[item].target||1))}\n${session.trening.list[item].onTarget||'0'} –∏–∑ ${session.trening.list[item].target}\n${session.trening.list[item].onTarget>=session.trening.list[item].target?'‚ôø'+prize+prize+prize+'‚ôø':''}\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞:\n${sDate.toLocaleDateString('ru-RU')}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é` : 
                '–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å:', Markup.inlineKeyboard(arr, {columns: 1} ))
                break;
            }       

            case 'tgTrnNDt' : {
                session.status='tgTrnNDt';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —á–∏—Å–ª–æ (1-31). –í —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è —Å—á–µ—Ç—á–∏–∫');
                break;
            }  

            case 'crTrnCat' : {
                session.status='crTrnCat';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
                break;
            }

            case 'tgTrnNew' : {
                session.status = 'tgTrnNew';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–ª—å');
                break;
            }

            case 'addTren:' : {
                session.tecnicalTren = Number(ctx.callbackQuery.data.slice(8));
                session.status = 'addTren:';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                break;
            }

            case 'reNmCatT' : {
                session.tecnicalTren = Number(ctx.callbackQuery.data.slice(8));
                session.status = 'reNmCatT';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                break;
            }

            case 'delCatT:' : {
                session.YorNid = ctx.callbackQuery.data;
                YorNkeyboard(ctx, `–£–¥–∞–ª—è–µ–º ${session.trening.list[Number(ctx.callbackQuery.data.slice(8))].name}?`);
                break;
            }

            case 'trenTren' : {
                let par = ctx.callbackQuery.data.slice(8);
                let itemStr = par.split('&&');
                let item = [];
                itemStr.map(str=>item.push(Number(str)));
                let obj = session.trening.list[item[0]].array[item[1]];
                ctx.replyWithHTML(`${obj.name}\n–í–µ—Å: ${obj.w}`, Markup.inlineKeyboard([
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ`, `edNameT:${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å`, `editWT::${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–£–¥–∞–ª–∏—Ç—å`, `DelTrenN${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ù–∞–∑–∞–¥`, `trnList:${item[0]}`)
                ], {columns: 1} ));
                break;
            }

            case 'DelTrenN' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                let se = [Number(item[0]), Number(item[1])]
                session.YorNid = ctx.callbackQuery.data;
                YorNkeyboard(ctx, `–£–¥–∞–ª—è–µ–º ${session.trening.list[se[0]].array[se[1]].name}?`);
                break;
            }            

            case 'edNameT:' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'edNameT:';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                break;
            }

            case 'editWT::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'editWT::';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã');
                break;
            }

            //

            case 'delCat::' : {
                session.YorNid = ctx.callbackQuery.data;
                YorNkeyboard(ctx, `–£–¥–∞–ª—è–µ–º ${session.serials.list[Number(ctx.callbackQuery.data.slice(8))].name}?`);
                break;
            }

            //–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞ –ù–µ—Ç

            case 'YESkeyb' : {
                let id = session.YorNid;
                if (id.slice(0,8)==='delCat::') {
                    let item = Number(id.slice(8));
                    session.serials.list.splice(item, 1);
                    let res = await sendPost(original(session.serials), 'updateSerialList', `Bearer ${session.token}`);
                    if (res.status === 200) {
                        logger.trace(`id: ${ctx.from.id}: api ok`)
                        trig = false;
                    }
                    else {
                        logger.error(`id: ${ctx.from.id}: api –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${res.status} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ updateSerialList (${ctx.callbackQuery.data})`)
                        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
                        break;session
                    }
                }
                else if (id.slice(0,8)==='delCatT:') {
                    let item = Number(id.slice(8));
                    session.trening.list.splice(item, 1);
                    let res = await sendPost(originalT(session.trening), 'updateTreningList', `Bearer ${session.token}`);
                    if (res.status === 200) {
                        logger.trace(`id: ${ctx.from.id}: api ok`)
                        trig = false;
                        startKeyboard(ctx, '–ì–æ—Ç–æ–≤–æ');
                        break;
                    }
                    else {
                        logger.error(`id: ${ctx.from.id}: api –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${res.status} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ updateTreningList (${ctx.callbackQuery.data})`)
                        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
                        break;
                    }
                }
                else if (id.slice(0, 8) === 'DelSer::') {
                    let se = id.slice(8).split('&&');
                    let item = [Number(se[0]), Number(se[1])];
                    session.serials.list[item[0]].array.splice(item[1], 1);
                    let res = await sendPost(original(session.serials), 'updateSerialList', `Bearer ${session.token}`);
                    if (res.status === 200) {
                        logger.trace(`id: ${ctx.from.id}: api ok`)
                        trig = false;
                    }
                    else {
                        logger.error(`id: ${ctx.from.id}: api –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${res.status} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ updateSerialList (${ctx.callbackQuery.data})`)
                        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
                        break;
                    }
                }
                else if (id.slice(0, 8) === 'DelTrenN') {
                    let se = id.slice(8).split('&&');
                    let item = [Number(se[0]), Number(se[1])];
                    session.trening.list[item[0]].array.splice(item[1], 1);
                    let res = await sendPost(originalT(session.trening), 'updateTreningList', `Bearer ${session.token}`);
                    if (res.status === 200) {
                        logger.trace(`id: ${ctx.from.id}: api ok`)
                        trig = false;
                        startKeyboard(ctx, '–ì–æ—Ç–æ–≤–æ');
                        break;
                    }
                    else {
                        logger.error(`id: ${ctx.from.id}: api –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${res.status} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ updateTreningList (${ctx.callbackQuery.data})`)
                        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
                        break;
                    }
                }
                else {
                    ctx.reply('–ß—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ');
                    break;
                }
            }

            case 'NOkeyb' : {
                if (trig) {
                    let id = session.YorNid;
                    delete(session.YorNid);
                    if (id.slice(0,8)==='delCat::') {
                        ctx.reply('–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç');
                    }
                    else if (id.slice(0,8)==='delCatT:') {
                        startKeyboard(ctx, '–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç');
                        break;
                    }
                    else  if (id.slice(0,8)==='DelTrenN') {
                        startKeyboard(ctx, '–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç');
                        break;
                    }
                }
                delete(session.YorNid);
            }

            //

            case 'serials' : {
                session.status='serials';
                let res = await sendPost({login: session.user.login}, 'findSerialList', `Bearer ${session.token}`);
                if (res.status===402) {
                    logger.trace(`id: ${ctx.from.id}: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ–∑–¥–∞—Ç—å`)
                    ctx.replyWithHTML(
                        '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞\n\n–°–æ–∑–¥–∞–¥–∏–º?',
                        Markup.inlineKeyboard([
                            Markup.button.callback(`${okLbl} –î–∞`, `CrSerial`),
                            Markup.button.callback(`${nokLbl} –ù–µ—Ç`, `StartP`)
                        ], {columns: 2}))
                        break;
                }
                else if (res.status===200) {
                    let data = parse(res.data); 
                    let arr = [];
                    session.serials = data;
                    data.list.map((item, index)=>arr.push(Markup.button.callback(`${item.name}`, `serList:${index}`)));
                    arr.push(Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, `crSerCat`),);
                    arr.push(Markup.button.callback(`–ù–∞–∑–∞–¥`, `StartP`));
                    ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(arr, {columns: 1} ))
                    break;
                }

                else {
                    ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                    break;
                }
            }

            case 'CrSerial' : {
                let res = await sendPost({login: session.user.login}, 'createSerialList', `Bearer ${session.token}`);
                let data = parse(res.data); 
                let serials = data;
                serials.list=[ {name: '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', array: []} ];
                session.serials = serials;
                res = await sendPost(original(serials), 'updateSerialList', `Bearer ${session.token}`);
                ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard([
                        Markup.button.callback(`–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, `serList:0`),
                        Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, `crSerCat`),
                        Markup.button.callback(`–ù–∞–∑–∞–¥`, `StartP`),
                    ], {columns: 1} ))
                break;
            }

            case 'crSerCat' : {
                session.status='categoryName';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
                break;
            }

            case 'StartP' : {
                session.status='work';
                startKeyboard(ctx);
                break;
            }

            case 'serList:' : {
                let item = Number(ctx.callbackQuery.data.slice(8));
                let arr = [];
                session.serials.list[item].array.map((items, index)=>arr.push(Markup.button.callback(`${items.name}`, `serSer::${item}&&${index}`)));
                arr.push(Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª', `addSer::${item}`));
                arr.push(Markup.button.callback('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `reNmCat:${item}`));
                arr.push(Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', `delCat::${item}`));
                arr.push(Markup.button.callback('–ù–∞–∑–∞–¥', `serials`));
                ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏–∞–ª:', Markup.inlineKeyboard(arr, {columns: 1} ))
                break;
            }

            case 'addSer::' : {
                session.tecnicalSerial = Number(ctx.callbackQuery.data.slice(8));
                session.status = 'addSer::';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞');
                break;
            }

            case 'reNmCat:' : {
                session.tecnicalSerial = Number(ctx.callbackQuery.data.slice(8));
                session.status = 'reNmCat:';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                break;
            }

            case 'seeById' : {
                startKeyboard(ctx, '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ');
                break;
            }

            case 'serSer::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let itemStr = par.split('&&');
                let item = [];
                itemStr.map(str=>item.push(Number(str)));
                let obj = session.serials.list[item[0]].array[item[1]];
                ctx.replyWithHTML(`${obj.name}\n–°–µ–∑–æ–Ω: ${obj.s}\n–≠–ø–∏–∑–æ–¥: ${obj.e}\n–í—Ä–µ–º—è: ${obj.t}\n`, Markup.inlineKeyboard([
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å`, `editWeb:${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–∑–æ–Ω`, `edSeaz::${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥`, `editEp::${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è`, `edTime::${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–£–¥–∞–ª–∏—Ç—å`, `DelSer::${item[0]}&&${item[1]}`),
                    Markup.button.callback(`–ù–∞–∑–∞–¥`, `serList:${item[0]}`)
                ], {columns: 1} ));
                break;
            }

            case 'editWeb:' : {

                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'editWeb:';
                let sendUri = new URL(formUrl);
                sendUri.searchParams.append('form', true);
                sendUri.searchParams.append('serialN', encodeURI(session.serials.list[session.tecnicalSub[0]].array[session.tecnicalSub[1]].name));
                sendUri.searchParams.append('serialS', encodeURI(session.serials.list[session.tecnicalSub[0]].array[session.tecnicalSub[1]].s));
                sendUri.searchParams.append('serialE', encodeURI(session.serials.list[session.tecnicalSub[0]].array[session.tecnicalSub[1]].e));
                sendUri.searchParams.append('serialT', encodeURI(session.serials.list[session.tecnicalSub[0]].array[session.tecnicalSub[1]].t));
                await ctx.replyWithHTML(
                    '–ü–µ—Ä–µ–π–¥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    Markup.keyboard([
                    Markup.button.webApp(
                        "Open",
                        sendUri.href
                    ),
                ]))
                break;
            }

            case 'edSeaz::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'edSeaz::';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞');
                break;
            }

            case 'editEp::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'editEp::';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏');
                break;
            }

            case 'edTime::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                session.tecnicalSub = [Number(item[0]), Number(item[1])]
                session.status = 'edTime::';
                ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤—Ä–µ–º—è');
                break;
            }

            case 'DelSer::' : {
                let par = ctx.callbackQuery.data.slice(8);
                let item = par.split('&&');
                let se = [Number(item[0]), Number(item[1])]
                session.YorNid = ctx.callbackQuery.data;
                YorNkeyboard(ctx, `–£–¥–∞–ª—è–µ–º ${session.serials.list[se[0]].array[se[1]].name}?`);
                break;
            }

            case 'register' : {
                session.status = 'register';
                session.reg = {make: 'login', login: '', name: '', first_name: '', last_name: '', email: '', fPass: '', pass: ''};
                ctx.reply('–ü—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏–Ω');
                break;
            }

            case 'yesRegS' : {
                session.status = 'work';
                delete(session.reg.make);
                let res = await sendPost({...session.reg, telegram: ctx.from.username, telegramID: ctx.from.id, telegramValid: true}, 'reg', '' );
                session.token = res.data.token;
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id}, ${ctx.from.username} –ø–æ–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`)
                ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ "–°—Ç–∞—Ä—Ç" (/start)')
                break;
            }

            case 'noRegS' : {
                session.status = '';
                delete(session.reg);
                await ctx.replyWithHTML(
                    '–ù–µ –º–æ–≥—É –í–∞—Å –æ–ø–æ–∑–Ω–∞—Ç—å\n\n–ú—ã –∑–Ω–∞–∫–æ–º—ã?',
                    Markup.inlineKeyboard([
                        Markup.button.callback('–£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç', `connect`),
                        Markup.button.callback('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', `register`)
                    ], {columns: 1}))
                break;
            }

            case 'connect' : {
                ctx.reply(`–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω`);
                session.status='login';
                break;
            }

            case 'dellist:' : {
                let ind = Number(ctx.callbackQuery.data.slice(ctx.callbackQuery.data[8]==='S'?9:8));
                ctx.replyWithHTML(
                    '–£–≤–µ—Ä–µ–Ω—ã?',
                    Markup.inlineKeyboard([
                        Markup.button.callback(`${okLbl}–î–∞`, `delListY${ctx.callbackQuery.data[8]==='S'?'S':''}${ind}`),
                        Markup.button.callback(`${nokLbl}–ù–µ—Ç`, `myList::${ctx.callbackQuery.data[8]==='S'?'S':''}${ind}`)
                    ], {columns: 2})
                );
                break;
            }

            case 'delListY' : {
                let ind = Number(ctx.callbackQuery.data.slice(ctx.callbackQuery.data[8]==='S'?9:8));
                let id = ctx.callbackQuery.data[8]==='S'?Number(session.slists[ind].id):Number(session.lists[ind].id);
                let res = await sendPost({id: id}, ctx.callbackQuery.data[8]==='S'?'delSumList':'delList', `Bearer ${session.token}`);
                if (res.status===200) session.lists.splice(ind, 1);
                trig=false;
            }

            case 'backLCr' : {
                if (trig) {
                    delete(session.compareLists);
                    trig=false;
                }
            }
            

            case 'sumLCr' : {
                if (trig) {
                    if (session.compareLists.length===1) {
                        ctx.reply('–í—ã–±—Ä–∞–Ω –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫. –ù–µ—Ç —Å–º—ã—Å–ª–∞ —Å–æ–≤–º–µ—â–∞—Ç—å');
                        delete(session.compareLists);
                    }
                    else {
                        let arrS = [];
                        session.compareLists.map((item)=>arrS.push(session.lists[item]));
                        delete(session.compareLists);
                        let compRes = compare.compareList(arrS);
                        let res = await sendPost(compRes, 'saveSumList', `Bearer ${session.token}`);
                    }
                }
            }

            case 'lists' : {
                session.lists=[];
                let res = await sendPost({name: ctx.session.user.name}, 'lists', `Bearer ${ctx.session.token}`);
                session.lists=res.data.lists;
                let listArr = [];
                res.data.lists.map((item, index)=>listArr.push(Markup.button.callback(item.name, `myList::${index}`)));
                let res2 = await sendPost({name: ctx.session.user.name}, 'sumLists', `Bearer ${ctx.session.token}`);
                session.slists=res2.data.sumLists;
                if (res2.data.hasOwnProperty('sumLists')) res2.data.sumLists.map((item, index)=>{
                    let nameL = '–°–æ–≤–º–µ—â–µ–Ω–Ω—ã–π ';
                    item.lists.name.map((item)=>nameL+=`- ${item}`);
                    listArr.push(Markup.button.callback(nameL, `myListS:${index}`))
                });
                listArr.push(Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫', `newList`));
                if (session.lists.length) listArr.push(Markup.button.callback('–°–æ–∑–¥–∞—Ç—å —Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', `newSList`));
                ctx.replyWithHTML(
                    '–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫',
                    Markup.inlineKeyboard(listArr, {columns: 1})
                );
                break;
            }

            case 'newSList' : {
                let listArr=[];
                if (session.compareLists) {
                    let ind = Number(ctx.callbackQuery.data.slice(8));
                    session.compareLists.push(ind);
                    session.lists.map((item, index)=>{
                        if (!session.compareLists.includes(index)) listArr.push(Markup.button.callback(item.name, `newSList${index}`))
                    })
                    listArr.push(Markup.button.callback('–°–æ–±—Ä–∞—Ç—å', `sumLCr`));
                    listArr.push(Markup.button.callback('–ù–∞–∑–∞–¥', `backLCr`));
                    ctx.replyWithHTML(
                        '–í—ã–±–µ—Ä–∏ –µ—â–µ —Å–ø–∏—Å–æ–∫',
                        Markup.inlineKeyboard(listArr, {columns: 1})
                    );
                }
                else {
                    session.compareLists = [];
                    session.lists.map((item, index)=>listArr.push(Markup.button.callback(item.name, `newSList${index}`)));
                    listArr.push(Markup.button.callback('–ù–∞–∑–∞–¥', `backLCr`));
                    ctx.replyWithHTML(
                        '–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫',
                        Markup.inlineKeyboard(listArr, {columns: 1})
                    );
                }
                break;
            }

            case 'newList' : {
                ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                session.status='newRow';
                break;
            }

            case 'addrow::' : {
                let ind = Number(ctx.callbackQuery.data.slice(8));
                session.status = 'addRowName';
                session.addRow = {stat: 'add', rowInd: ind, name: '', total: 0, ind: '', del: 0, selected: false };
                ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                break;
            }

            case 'addind::' : {
                let ind = ctx.callbackQuery.data.slice(8);
                switch (ind) {
                    case 'kg' : { session.addRow.ind=' –∫–≥'; break; }
                    case 'g' : { session.addRow.ind = ' –∫–≥'; session.addRow.total/=1000; break; }
                    case 'l' : { session.addRow.ind=' –ª'; break; }
                    case 'ml' : { session.addRow.ind = ' –ª'; session.addRow.total/=1000; break; }
                }
                let str = '–î–æ–±–∞–≤–ª—è–µ–º?\n\n';
                str+=(nokText(session.addRow.name, session.addRow.total, session.addRow.ind, true));
                ctx.replyWithHTML(str,
                    Markup.inlineKeyboard([
                        Markup.button.callback(`${okLbl}`, `yesAdR::${session.addRow.rowInd}`),
                        Markup.button.callback(`${nokLbl}`, `noAddRow`)
                    ], {columns: 2})    
                );
                break;
            }

            case 'yesAdR::' : {
                let obj = {...ctx.session.addRow};
                let ind = obj.rowInd;
                delete(obj.stat);
                delete(obj.rowInd);
                let list = session.lists[ind];
                let inp = -1;
                for (let i=0; i<list.data.length; i++) 
                    if (list.data[i].name.toLowerCase()===obj.name.toLowerCase()) {
                        inp=i;
                        break;
                    }
                if (inp>=0) list.data[inp].total+=obj.total; 
                else list.data.push( obj );
                let res = sendPost({list: list}, 'updList', `Bearer ${session.token}`);
                if (res.status===200) session.lists[ind] = list;
                trig = false;
            }

            case `noAddRow` : {
                delete(session.addRow);
                session.status='work';
                trig = false;
            }

            case 'myList::' : {
                let ind = Number(ctx.callbackQuery.data.slice(8));
                let str = '';
                session.lists[ind].data.map((item)=>str+=(item.selected?okText(item.name, item.total, item.ind):nokText(item.name, item.total, item.ind)));
                str === '' ?
                ctx.replyWithHTML('–ü—É—Å—Ç–æ. –î–æ–±–∞–≤–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å?',
                    Markup.inlineKeyboard([
                        Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç', `addrow::${ind}`),
                        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', `dellist:${ind}`),
                        Markup.button.callback('–ù–∞–∑–∞–¥', `lists`)
                    ], {columns: 1})    
                ) :
                ctx.replyWithHTML(str,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–û—Ç–º–µ—Ç–∏—Ç—å', `select::${ind}`),
                        Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç', `addrow::${ind}`),
                        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç', `delrow::${ind}`),
                        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', `dellist:${ind}`),
                        Markup.button.callback('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º', `shlist::${ind}`),
                        Markup.button.callback('–ù–∞–∑–∞–¥', `lists`)
                    ], {columns: 1})    
                );
                break;
            }

            case 'myListS:' : {
                let ind = Number(ctx.callbackQuery.data.slice(8));
                let str = '';
                session.slists[ind].data.map((item)=>str+=(item.selected?okText(item.name, item.total, item.ind):nokText(item.name, item.total, item.ind)));
                str === '' ?
                ctx.replyWithHTML('–ü—É—Å—Ç–æ. –î–æ–±–∞–≤–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å?',
                    Markup.inlineKeyboard([
                        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', `dellist:S${ind}`),
                        Markup.button.callback('–ù–∞–∑–∞–¥', `lists`)
                    ], {columns: 1})    
                ) :
                ctx.replyWithHTML(str,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–û—Ç–º–µ—Ç–∏—Ç—å', `select::S${ind}`),
                        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', `dellist:S${ind}`),
                        Markup.button.callback('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º', `shlist::S${ind}`),
                        Markup.button.callback('–ù–∞–∑–∞–¥', `lists`)
                    ], {columns: 1})    
                );
                break;
            }

            case 'shlist::' : {
                let ind = Number(ctx.callbackQuery.data.slice(ctx.callbackQuery.data[8]==='S' ? 9 : 8));
                let id = Number(session.lists[ind].id);
                if (ctx.callbackQuery.data[8]!=='S') {
                    let res = await sendPost({id: id}, 'setHash', `Bearer ${session.token}`);
                    if (res.status===200) {
                        let addr = new URL(formUrl);
                        addr.searchParams.append('list', res.data.hash);
                        addr.searchParams.append('done', 'stList');
                        ctx.reply(addr.href);
                    }
                    else ctx.reply('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
                else {
                    let addr = new URL(formUrl);
                    addr.searchParams.append('list', session.slists[ind].hash);
                    addr.searchParams.append('done', 'sumtList');
                    ctx.reply(addr.href);
                }
                startKeyboard(ctx);
                break;
            }

            case 'rowsel::' : {
                let buf = ctx.callbackQuery.data.slice(ctx.callbackQuery.data[8]==='S'?9:8);
                let ind = Number(buf.slice(0, buf.indexOf(':')));
                let pos = Number(buf.slice(buf.indexOf(':')+2));
                let list = ctx.callbackQuery.data[8]==='S'?session.slists[ind]:session.lists[ind];
                if (session.addRow?.stat==='del') list.data.splice(pos, 1);
                else list.data[pos].selected=!list.data[pos].selected;
                let res;
                if (ctx.callbackQuery.data[8]==='S') res = await sendPost(list, 'saveSumList', `Bearer ${session.token}`);
                else res = await sendPost({list}, 'updList', `Bearer ${session.token}`);
                if (res.status===200)
                    ctx.callbackQuery.data[8]==='S'?session.slists[0]=list:session.lists[0]=list;
                trig=false;
            }

            case 'delrow::' : {
                if (trig) {
                    let buf = ctx.callbackQuery.data.slice(8);
                    session.addRow={ stat: 'del' };
                }
            }

            case 'select::' : {
                let buf = ctx.callbackQuery.data.slice(ctx.callbackQuery.data[8]==='S'?9:8);
                if (buf.indexOf(':')!==(-1)) buf=buf.slice(0, buf.indexOf(':'))
                let ind = Number(buf);
                let listArr = [];
                if (ctx.callbackQuery.data[8]==='S') {
                    session.slists[ind].data.map((item, index)=>listArr.push(
                        Markup.button.callback(
                            (item.selected?okText(item.name, item.total, item.ind, true, true):nokText(item.name, item.total, item.ind, true)), 
                            `rowsel::S${ind}::${index}`)));
                }
                else {
                    session.lists[ind].data.map((item, index)=>listArr.push(
                        Markup.button.callback(
                            (item.selected?okText(item.name, item.total, item.ind, true, true):nokText(item.name, item.total, item.ind, true)), 
                            `rowsel::${ind}::${index}`)));
                }
                listArr.push(Markup.button.callback('OK', `myList${ctx.callbackQuery.data[8]==='S'?'S':':'}:${buf}`))
                ctx.replyWithHTML(`–≤—ã–±–µ—Ä–∏ —á—Ç–æ –æ—Ç–º–µ—Ç–∏—Ç—å`,
                    Markup.inlineKeyboard(listArr, {columns: 1})
                )

                break;
            }
        }
        ctx.session = session
    }
    ctx.answerCbQuery();
    if (del) ctx.deleteMessage();
}

module.exports = callback_query;