const { Markup } = require('telegraf');
const {session} = require('telegraf');
const okLbl='‚úÖ ';
const nokLbl='‚ùå ';
const greenBlock = 'üü©';
const redBlock = 'üü•';
const fs = require("fs");

module.exports.startKeyboard = async function(ctx, text, admin) {
    let mData = await ctx.reply('–û–±–Ω–æ–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', Markup.removeKeyboard(true));
    await ctx.deleteMessage(mData.message_id);
    let arr = [
        Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–ø–∏—Å–∫–∏', `lists`),
        Markup.button.callback('–ù–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ –µ–≥–æ ID', `seeById`),
        Markup.button.callback('–ë–ª–æ–∫–Ω–æ—Ç–∏–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª—å—á–∏–∫–æ–≤', `serials`),
        Markup.button.callback('–ë–ª–æ–∫–Ω–æ—Ç–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', `trening`),
    ];
    if (admin) arr.push(Markup.button.callback('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', `PMessage`))
    ctx.replyWithHTML(
        (text||`–ü—Ä–∏–≤–µ—Ç ${ctx.session.user.login}\n\n–ß–µ–º –∑–∞–π–º–µ–º—Å—è?`), 
        Markup.inlineKeyboard(arr, {columns: 1}))
}

module.exports.isEmpty = function(obj) {
    for (let key in obj) {
        return false;
    }
    return true;
}

module.exports.accUsList = (session, shMode) => {
    let buf = [];
    if (!shMode||(shMode==='me')) buf.push(session.user.login);
    else if (shMode==='friends') {
        buf = session.user.friends;
        buf.push(session.user.login);
    }
    return buf; 
}

module.exports.okText = (text, total, index, karet, line) => {
    let rTotal = (index===' –∫–≥'||index==='–ª')&&total<1 ? total*1000 : total;
    let rIndex = total<1&&index===' –∫–≥' ? ' –≥' : total<1&&index===' –ª' ? ' –º–ª' : index;
    return line?`${okLbl}${text} - ${rTotal+rIndex}${karet?'':'\n'}`:`${okLbl}<s>${text} - ${rTotal+rIndex}</s>${karet?'':'\n'}`
}

module.exports.nokText = (text, total, index, karet) => {
    let rTotal = (index===' –∫–≥'||index==='–ª')&&total<1 ? total*1000 : total;
    let rIndex = total<1&&index===' –∫–≥' ? ' –≥' : total<1&&index===' –ª' ? ' –º–ª' : index;
    return `${nokLbl}${text} - ${rTotal+rIndex}${karet?'':'\n'}`
}

module.exports.YorNkeyboard = (ctx, text) => {
    ctx.replyWithHTML(
        (text||`–í—ã —É–≤–µ—Ä–µ–Ω—ã?`), Markup.inlineKeyboard([
            Markup.button.callback(`${okLbl}–î–∞`, `YESkeyb`),
            Markup.button.callback(`${nokLbl}–ù–µ—Ç`, `NOkeyb`)
        ], {columns: 2}))
}

module.exports.progressBar = (value) => {
    let str = '';
    console.log(value)
    for (let i=0; i<10; i++) {
        if ((Math.floor(100*i/9)<=(value+0.01))&&(value!==0)) str+=greenBlock;
        else str+=redBlock;
    }
    console.log(str)
    return str;
}

module.exports.checkFolder = (name) => {
    let ddir = [];            
    let chatFolder = fs.readdirSync("chat", { withFileTypes: true });
    chatFolder=chatFolder.filter(d => d.isDirectory());
    chatFolder.map(d => ddir.push(d.name));
    console.log('folders')
    console.log(ddir);
    if (!ddir.includes(decodeURI(name))) {
        console.log('no folder')
        fs.mkdir(`chat/${decodeURI(name)}`, err => {
            if(err) throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
            console.log('–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        });
    }
    ddir = [];
    chatFolder = fs.readdirSync(`chat/${name}`, { withFileTypes: true });
    chatFolder=chatFolder.filter(d => d.isDirectory());
    chatFolder.map(d => ddir.push(d.name));
    console.log('folders')
    console.log(ddir);
    
    if (!ddir.includes('img')) {
        console.log('no img');
        fs.mkdir(`chat/${name}/img`, err => {
            if(err) throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
            console.log('–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        });
    }
    
    if (!ddir.includes('docs')) {
        console.log('no docs');
        fs.mkdir(`chat/${name}/docs`, err => {
            if(err) throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
            console.log('–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        });
    }
}